//AM-RentalManagementV1.1

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.20.3
// source: src/api/specification/api_specification_am_rental_management.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RentalsCollectionService_ListAvailableCars_FullMethodName = "/rentalmanagement.RentalsCollectionService/ListAvailableCars"
)

// RentalsCollectionServiceClient is the client API for RentalsCollectionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RentalsCollectionServiceClient interface {
	ListAvailableCars(ctx context.Context, in *ListAvailableCarsRequest, opts ...grpc.CallOption) (*ListAvailableCarsResponse, error)
}

type rentalsCollectionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRentalsCollectionServiceClient(cc grpc.ClientConnInterface) RentalsCollectionServiceClient {
	return &rentalsCollectionServiceClient{cc}
}

func (c *rentalsCollectionServiceClient) ListAvailableCars(ctx context.Context, in *ListAvailableCarsRequest, opts ...grpc.CallOption) (*ListAvailableCarsResponse, error) {
	out := new(ListAvailableCarsResponse)
	err := c.cc.Invoke(ctx, RentalsCollectionService_ListAvailableCars_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RentalsCollectionServiceServer is the server API for RentalsCollectionService service.
// All implementations must embed UnimplementedRentalsCollectionServiceServer
// for forward compatibility
type RentalsCollectionServiceServer interface {
	ListAvailableCars(context.Context, *ListAvailableCarsRequest) (*ListAvailableCarsResponse, error)
	mustEmbedUnimplementedRentalsCollectionServiceServer()
}

// UnimplementedRentalsCollectionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRentalsCollectionServiceServer struct {
}

func (UnimplementedRentalsCollectionServiceServer) ListAvailableCars(context.Context, *ListAvailableCarsRequest) (*ListAvailableCarsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAvailableCars not implemented")
}
func (UnimplementedRentalsCollectionServiceServer) mustEmbedUnimplementedRentalsCollectionServiceServer() {
}

// UnsafeRentalsCollectionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RentalsCollectionServiceServer will
// result in compilation errors.
type UnsafeRentalsCollectionServiceServer interface {
	mustEmbedUnimplementedRentalsCollectionServiceServer()
}

func RegisterRentalsCollectionServiceServer(s grpc.ServiceRegistrar, srv RentalsCollectionServiceServer) {
	s.RegisterService(&RentalsCollectionService_ServiceDesc, srv)
}

func _RentalsCollectionService_ListAvailableCars_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAvailableCarsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RentalsCollectionServiceServer).ListAvailableCars(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RentalsCollectionService_ListAvailableCars_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RentalsCollectionServiceServer).ListAvailableCars(ctx, req.(*ListAvailableCarsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RentalsCollectionService_ServiceDesc is the grpc.ServiceDesc for RentalsCollectionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RentalsCollectionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rentalmanagement.RentalsCollectionService",
	HandlerType: (*RentalsCollectionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListAvailableCars",
			Handler:    _RentalsCollectionService_ListAvailableCars_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/api/specification/api_specification_am_rental_management.proto",
}

const (
	CustomerService_RentCar_FullMethodName      = "/rentalmanagement.CustomerService/RentCar"
	CustomerService_ListRentals_FullMethodName  = "/rentalmanagement.CustomerService/ListRentals"
	CustomerService_CancelRental_FullMethodName = "/rentalmanagement.CustomerService/CancelRental"
)

// CustomerServiceClient is the client API for CustomerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CustomerServiceClient interface {
	RentCar(ctx context.Context, in *RentCarRequest, opts ...grpc.CallOption) (*RentCarResponse, error)
	ListRentals(ctx context.Context, in *ListRentalsRequest, opts ...grpc.CallOption) (*ListRentalsResponse, error)
	CancelRental(ctx context.Context, in *CancelRentalRequest, opts ...grpc.CallOption) (*CancelRentalResponse, error)
}

type customerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCustomerServiceClient(cc grpc.ClientConnInterface) CustomerServiceClient {
	return &customerServiceClient{cc}
}

func (c *customerServiceClient) RentCar(ctx context.Context, in *RentCarRequest, opts ...grpc.CallOption) (*RentCarResponse, error) {
	out := new(RentCarResponse)
	err := c.cc.Invoke(ctx, CustomerService_RentCar_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) ListRentals(ctx context.Context, in *ListRentalsRequest, opts ...grpc.CallOption) (*ListRentalsResponse, error) {
	out := new(ListRentalsResponse)
	err := c.cc.Invoke(ctx, CustomerService_ListRentals_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) CancelRental(ctx context.Context, in *CancelRentalRequest, opts ...grpc.CallOption) (*CancelRentalResponse, error) {
	out := new(CancelRentalResponse)
	err := c.cc.Invoke(ctx, CustomerService_CancelRental_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CustomerServiceServer is the server API for CustomerService service.
// All implementations must embed UnimplementedCustomerServiceServer
// for forward compatibility
type CustomerServiceServer interface {
	RentCar(context.Context, *RentCarRequest) (*RentCarResponse, error)
	ListRentals(context.Context, *ListRentalsRequest) (*ListRentalsResponse, error)
	CancelRental(context.Context, *CancelRentalRequest) (*CancelRentalResponse, error)
	mustEmbedUnimplementedCustomerServiceServer()
}

// UnimplementedCustomerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCustomerServiceServer struct {
}

func (UnimplementedCustomerServiceServer) RentCar(context.Context, *RentCarRequest) (*RentCarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RentCar not implemented")
}
func (UnimplementedCustomerServiceServer) ListRentals(context.Context, *ListRentalsRequest) (*ListRentalsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRentals not implemented")
}
func (UnimplementedCustomerServiceServer) CancelRental(context.Context, *CancelRentalRequest) (*CancelRentalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelRental not implemented")
}
func (UnimplementedCustomerServiceServer) mustEmbedUnimplementedCustomerServiceServer() {}

// UnsafeCustomerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CustomerServiceServer will
// result in compilation errors.
type UnsafeCustomerServiceServer interface {
	mustEmbedUnimplementedCustomerServiceServer()
}

func RegisterCustomerServiceServer(s grpc.ServiceRegistrar, srv CustomerServiceServer) {
	s.RegisterService(&CustomerService_ServiceDesc, srv)
}

func _CustomerService_RentCar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RentCarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).RentCar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomerService_RentCar_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).RentCar(ctx, req.(*RentCarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_ListRentals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRentalsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).ListRentals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomerService_ListRentals_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).ListRentals(ctx, req.(*ListRentalsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_CancelRental_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelRentalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).CancelRental(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomerService_CancelRental_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).CancelRental(ctx, req.(*CancelRentalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CustomerService_ServiceDesc is the grpc.ServiceDesc for CustomerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CustomerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rentalmanagement.CustomerService",
	HandlerType: (*CustomerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RentCar",
			Handler:    _CustomerService_RentCar_Handler,
		},
		{
			MethodName: "ListRentals",
			Handler:    _CustomerService_ListRentals_Handler,
		},
		{
			MethodName: "CancelRental",
			Handler:    _CustomerService_CancelRental_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/api/specification/api_specification_am_rental_management.proto",
}

const (
	CustomersCollectionService_RegisterCustomer_FullMethodName   = "/rentalmanagement.CustomersCollectionService/RegisterCustomer"
	CustomersCollectionService_DeregisterCustomer_FullMethodName = "/rentalmanagement.CustomersCollectionService/DeregisterCustomer"
)

// CustomersCollectionServiceClient is the client API for CustomersCollectionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CustomersCollectionServiceClient interface {
	RegisterCustomer(ctx context.Context, in *RegisterCustomerRequest, opts ...grpc.CallOption) (*RegisterCustomerResponse, error)
	DeregisterCustomer(ctx context.Context, in *DeregisterCustomerRequest, opts ...grpc.CallOption) (*DeregisterCustomerResponse, error)
}

type customersCollectionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCustomersCollectionServiceClient(cc grpc.ClientConnInterface) CustomersCollectionServiceClient {
	return &customersCollectionServiceClient{cc}
}

func (c *customersCollectionServiceClient) RegisterCustomer(ctx context.Context, in *RegisterCustomerRequest, opts ...grpc.CallOption) (*RegisterCustomerResponse, error) {
	out := new(RegisterCustomerResponse)
	err := c.cc.Invoke(ctx, CustomersCollectionService_RegisterCustomer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customersCollectionServiceClient) DeregisterCustomer(ctx context.Context, in *DeregisterCustomerRequest, opts ...grpc.CallOption) (*DeregisterCustomerResponse, error) {
	out := new(DeregisterCustomerResponse)
	err := c.cc.Invoke(ctx, CustomersCollectionService_DeregisterCustomer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CustomersCollectionServiceServer is the server API for CustomersCollectionService service.
// All implementations must embed UnimplementedCustomersCollectionServiceServer
// for forward compatibility
type CustomersCollectionServiceServer interface {
	RegisterCustomer(context.Context, *RegisterCustomerRequest) (*RegisterCustomerResponse, error)
	DeregisterCustomer(context.Context, *DeregisterCustomerRequest) (*DeregisterCustomerResponse, error)
	mustEmbedUnimplementedCustomersCollectionServiceServer()
}

// UnimplementedCustomersCollectionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCustomersCollectionServiceServer struct {
}

func (UnimplementedCustomersCollectionServiceServer) RegisterCustomer(context.Context, *RegisterCustomerRequest) (*RegisterCustomerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterCustomer not implemented")
}
func (UnimplementedCustomersCollectionServiceServer) DeregisterCustomer(context.Context, *DeregisterCustomerRequest) (*DeregisterCustomerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeregisterCustomer not implemented")
}
func (UnimplementedCustomersCollectionServiceServer) mustEmbedUnimplementedCustomersCollectionServiceServer() {
}

// UnsafeCustomersCollectionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CustomersCollectionServiceServer will
// result in compilation errors.
type UnsafeCustomersCollectionServiceServer interface {
	mustEmbedUnimplementedCustomersCollectionServiceServer()
}

func RegisterCustomersCollectionServiceServer(s grpc.ServiceRegistrar, srv CustomersCollectionServiceServer) {
	s.RegisterService(&CustomersCollectionService_ServiceDesc, srv)
}

func _CustomersCollectionService_RegisterCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterCustomerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomersCollectionServiceServer).RegisterCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomersCollectionService_RegisterCustomer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomersCollectionServiceServer).RegisterCustomer(ctx, req.(*RegisterCustomerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomersCollectionService_DeregisterCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeregisterCustomerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomersCollectionServiceServer).DeregisterCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomersCollectionService_DeregisterCustomer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomersCollectionServiceServer).DeregisterCustomer(ctx, req.(*DeregisterCustomerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CustomersCollectionService_ServiceDesc is the grpc.ServiceDesc for CustomersCollectionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CustomersCollectionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rentalmanagement.CustomersCollectionService",
	HandlerType: (*CustomersCollectionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterCustomer",
			Handler:    _CustomersCollectionService_RegisterCustomer_Handler,
		},
		{
			MethodName: "DeregisterCustomer",
			Handler:    _CustomersCollectionService_DeregisterCustomer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/api/specification/api_specification_am_rental_management.proto",
}
